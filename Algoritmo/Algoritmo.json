{
  "name": "Algoritmo",
  "nodes": [
    {
      "parameters": {
        "path": "552b0383-5ebc-45cc-a343-9a1932070fc7",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -480,
        -120
      ],
      "id": "d9e47458-3269-43a0-91c5-5d9b0ff8ac00",
      "name": "Webhook",
      "webhookId": "552b0383-5ebc-45cc-a343-9a1932070fc7"
    },
    {
      "parameters": {
        "jsCode": "// Acceder a los datos recibidos del nodo anterior (Webhook)\nconst webhookData = $input.item.json;\n\n// Validar si los datos esperados existen\nif (!webhookData || !webhookData.symbol || !webhookData.price || !webhookData.signal_type) {\n    throw new Error(\"Datos de señal incompletos o inválidos recibidos.\");\n}\n\n// Extraer y limpiar los datos importantes\nconst signal = {\n    timestamp: new Date().toISOString(), // Añade un timestamp de cuando se procesa\n    symbol: webhookData.symbol.toUpperCase(), // Convertir a mayúsculas para consistencia\n    price: parseFloat(webhookData.price), // Asegurar que el precio es un número\n    signal_type: webhookData.signal_type.toUpperCase(), // BUY/SELL en mayúsculas\n    original_data: webhookData // Guardar los datos originales para depuración\n};\n\n// Puedes añadir más lógica aquí, por ejemplo, verificar si el precio es positivo, etc.\nif (isNaN(signal.price) || signal.price <= 0) {\n    throw new Error(\"El precio de la señal es inválido.\");\n}\n\n// Devolver la señal procesada para el siguiente nodo\nreturn [{ json: signal }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        -120
      ],
      "id": "c87ea843-f447-4118-a8b2-b0980b40c224",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "35f1b929-be06-4131-83c2-187b0cd2d8ba",
              "leftValue": "={{ $json.signal_type }}",
              "rightValue": "BUY",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -60,
        -120
      ],
      "id": "1bdf21cc-7c2a-4ca9-b06c-3a7cb506a498",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        -240
      ],
      "id": "9772d2fa-99e5-4e98-8f46-a6f8268b384e",
      "name": "HTTP Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d57103a9-408e-4545-9409-96909edb6ff1",
  "meta": {
    "instanceId": "86e739eea938306b865cd0a570e7d217fc7e4506f43d76afb9a8128192903df2"
  },
  "id": "TbJjy7EX00vbxUoE",
  "tags": []
}