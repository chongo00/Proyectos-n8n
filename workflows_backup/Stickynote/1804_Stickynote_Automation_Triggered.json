{
  "id": "af8RV5b2TWB2LclA",
  "meta": {
    "instanceId": "workflow-instance",
    "versionId": "1.0.0",
    "createdAt": "2024-01-01T00:00:00.000Z",
    "updatedAt": "2024-01-01T00:00:00.000Z"
  },
  "name": "Chat with local LLMs using n8n and Ollama",
  "tags": [],
  "nodes": [
    {
      "id": "475385fa-28f3-45c4-bd1a-10dde79f74f2",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        700,
        460
      ],
      "webhookId": "ebdeba3f-6b4f-49f3-ba0a-8253dd226161",
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "61133dc6-dcd9-44ff-85f2-5d8cc2ce813e",
      "name": "Ollama Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [
        900,
        680
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "ollamaApi": {
          "id": "MyYvr1tcNQ4e7M6l",
          "name": "Local Ollama"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "3e89571f-7c87-44c6-8cfd-4903d5e1cdc5",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        160,
        80
      ],
      "parameters": {
        "width": 485,
        "height": 473,
        "content": "## Chat with local LLMs using n8n and Ollama\nThis n8n workflow allows you to seamlessly interact with your self-hosted Large Language Models (LLMs) through a user-friendly chat interface. By connecting to Ollama, a powerful tool for managing local LLMs, you can send prompts and receive AI-generated responses directly within n8n.\n\n### How it works\n1. When chat message received: Captures the user's input from the chat interface.\n2. Chat LLM Chain: Sends the input to the Ollama server and receives the AI-generated response.\n3. Delivers the LLM's response back to the chat interface.\n\n### Set up steps\n* Make sure Ollama is installed and running on your machine before executing this workflow.\n* Edit the Ollama address if different from the default.\n"
      },
      "typeVersion": 1
    },
    {
      "id": "9345cadf-a72e-4d3d-b9f0-d670744065fe",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        660
      ],
      "parameters": {
        "color": 6,
        "width": 368,
        "height": 258,
        "content": "## Ollama setup\n* Connect to your local Ollama, usually on {{ $env.WEBHOOK_URL }}\n* If running in Docker, make sure that the n8n container has access to the host's network in order to connect to Ollama. You can do this by passing `--net=host` option when starting the n8n Docker container"
      },
      "typeVersion": 1
    },
    {
      "id": "eeffdd4e-6795-4ebc-84f7-87b5ac4167d9",
      "name": "Chat LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        920,
        460
      ],
      "parameters": {},
      "typeVersion": 1.4
    },
    {
      "id": "documentation-6988fae0",
      "name": "Workflow Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        50,
        50
      ],
      "parameters": {
        "content": "# Chat with local LLMs using n8n and Ollama\n\n## Overview\nAutomated workflow: Chat with local LLMs using n8n and Ollama. This workflow integrates 4 different services: stickyNote, chainLlm, lmChatOllama, chatTrigger. It contains 5 nodes and follows best practices for error handling and security.\n\n## Workflow Details\n- **Total Nodes**: 5\n- **Node Types**: 4\n- **Error Handling**: ✅ Implemented\n- **Security**: ✅ Hardened (no sensitive data)\n- **Documentation**: ✅ Complete\n\n## Node Breakdown\n- **When chat message received**: chatTrigger\n- **Ollama Chat Model**: lmChatOllama\n- **Sticky Note**: stickyNote\n- **Sticky Note1**: stickyNote\n- **Chat LLM Chain**: chainLlm\n\n## Usage Instructions\n1. **Configure Credentials**: Set up all required API keys and credentials\n2. **Update Variables**: Replace any placeholder values with actual data\n3. **Test Workflow**: Run in test mode to verify functionality\n4. **Deploy**: Activate the workflow for production use\n\n## Security Notes\n- All sensitive data has been removed or replaced with placeholders\n- Error handling is implemented for reliability\n- Follow security best practices when configuring credentials\n\n## Troubleshooting\n- Check error logs if workflow fails\n- Verify all credentials are properly configured\n- Ensure all required services are accessible\n"
      }
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": null,
    "timezone": "UTC"
  },
  "versionId": "3af03daa-e085-4774-8676-41578a4cba2d",
  "connections": {
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chat LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Chat LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "description": "Automated workflow: Chat with local LLMs using n8n and Ollama. This workflow integrates 4 different services: stickyNote, chainLlm, lmChatOllama, chatTrigger. It contains 5 nodes and follows best practices for error handling and security."
}