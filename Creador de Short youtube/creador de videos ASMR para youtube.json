{
  "name": "creador de videos ASMR para youtube",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/mmaudio-v2 ",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "= {\n        \"prompt\": \"ASMR Soothing sound effects. {{ $('Prompts AI Agent').item.json.output.Sound }}\",\n        \"duration\": 10,\n        \"video_url\": \"{{ $json.data.outputs[0] }}\"\n  }\n",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "id": "d02d2c74-3a13-465a-8ea3-dbaab4991d72",
      "name": "Create Sounds",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3260,
        440
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/mmaudio-v2/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "8d6cf7d9-60ce-4e69-b905-56b5b0e88434",
      "name": "Get Sounds",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3780,
        440
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 60
      },
      "id": "d6f323d7-c277-4448-a31a-70fc919ca57d",
      "name": "Wait for Sounds",
      "type": "n8n-nodes-base.wait",
      "position": [
        3480,
        440
      ],
      "typeVersion": 1.1,
      "webhookId": "4466514e-d0f7-47f9-a589-4ec0e351cebe"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    video_urls: items.map(item => item.json.video.url)\n  }\n];"
      },
      "id": "3ac58451-7bb6-476f-aef1-236eab6c022b",
      "name": "List Elements",
      "type": "n8n-nodes-base.code",
      "position": [
        3060,
        640
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/ffmpeg-api/compose",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"tracks\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"video\",\n      \"keyframes\": [\n        { \"url\": \"{{ $json.video_urls[0] }}\", \"timestamp\": 0, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[1] }}\", \"timestamp\": 10, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[2] }}\", \"timestamp\": 20, \"duration\": 10 }\n      ]\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "id": "9971a769-5cdf-47de-8e33-daaf4552e8d6",
      "name": "Sequence Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3260,
        640
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/ffmpeg-api/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "4931fed2-cd22-4e36-841a-2729dc5dba39",
      "name": "Get Final Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3780,
        640
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 60
      },
      "id": "571d580a-29a8-4e34-a0b7-5fa369010483",
      "name": "Wait for Final Video",
      "type": "n8n-nodes-base.wait",
      "position": [
        3480,
        640
      ],
      "typeVersion": 1.1,
      "webhookId": "4c1ee060-5725-4098-8367-223b1f36d42a"
    },
    {
      "parameters": {},
      "id": "46c20981-8943-4f16-8951-deba8ab16742",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        2580,
        520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Give me 3 video prompts based on the previous \n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Role: You are a prompt-generation AI specializing in satisfying, ASMR-style video prompts for kinetic sand. Your task is to generate a multi-scene video sequence that vividly shows a tool (like a knife, scoop, or press) interacting with kinetic sand in a clean, high-detail setting.\n\nYour writing must follow this style:\n\nSatisfying, tactile realism.\nMacro-level detail with a tight focus on the tool interacting with the sand's unique texture.\nThe tool must always be in motion ‚Äî slicing, scooping, pressing, or crumbling the sand. Never idle or static.\nCamera terms are allowed (e.g. macro view, top-down shot, slow-motion).\n\nEach scene must contain all of the following, expressed through detailed visual language:\n\n‚úÖ The kinetic sand (from the Idea)\n‚úÖ The environment or surface (from the Environment)\n‚úÖ The texture, structure, and behavior of the sand as it's being manipulated\n‚úÖ A visible tool (knife, scoop, mold) actively interacting with the sand\n\nDescriptions should show:\n\nThe physical makeup of the sand ‚Äî is it layered with different colors, sparkly, smooth, or matte? Emphasize its granular, yet cohesive structure.\nHow the sand responds to the tool ‚Äî clean slicing, soft crumbling, perfect imprints, satisfying deformation, or a cascading collapse.\nThe interaction between the tool and the sand ‚Äî sand grains momentarily sticking to the tool, the smooth surface left behind, the crisp edges of a cut.\nAny ASMR-relevant sensory cues like the satisfying crunch, the soft hiss of falling grains, or the shimmer of glitter, but always shown visually ‚Äî not narrated.\n\nTone:\n\nSatisfying, mesmerizing, tactile.\nNo poetic metaphors, emotion, or storytelling.\nAvoid fantasy or surreal imagery.\nAll description must feel physically grounded and visually appealing.\n\nLength:\n\nEach scene must be between 1,000 and 2,000 characters.\nNo shallow or repetitive scenes ‚Äî each must be immersive, descriptive, and specific.\nEach scene should explore a distinct phase of the action, a different camera perspective, or a new behavior of the sand.\n\nInputs:\n\nIdea: \"{{ $json.idea }}\"\nEnvironment: \"{{ $json.environment_prompt }}\"\nSound: \"{{ $json.sound_prompt }}\"\n\nFormat:\n\nIdea: \"...\"\nEnvironment: \"...\"\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"\n(and so on)\n\n***\nREGLA FINAL Y M√ÅS IMPORTANTE: Tu respuesta debe ser √öNICAMENTE el objeto JSON. No incluyas la palabra \"json\", ni ```, ni ninguna explicaci√≥n o texto introductorio. Tu salida debe comenzar con `{` y terminar con `}`. Debe ser un JSON v√°lido y nada m√°s."
        }
      },
      "id": "29afad90-d1d6-4aad-8bd5-a92fe1897e31",
      "name": "Prompts AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2720,
        220
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Diver Removes Nets Off Whale üêã #whalerescue #marinelife #oceanrescue #seahelpers #love #nature #instagood #explore #viral #savenature #oceanguardians #cleanoceans\",\n    \"Idea\": \"Diver carefully cuts tangled net from distressed whale in open sea\",\n    \"Environment\": \"Open ocean, sunlight beams through water, diver and whale, cinematic realism\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]\n"
      },
      "id": "b7447468-18fd-40c8-9f0b-4c4125812082",
      "name": "Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        2380,
        440
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "85f4ee97-6717-4ba6-a83b-295b9f602831",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        1500,
        220
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.replicate.com/v1/predictions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "=application/json",
        "body": "={\n  \"version\": \"9f747673945c62801b13b84701c783929c0ee784e4748ec062204894dda1a351\",\n  \"input\": {\n    \"prompt\": \"{{ $json.description }}\"\n  }\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 3000
            }
          },
          "allowUnauthorizedCerts": true,
          "lowercaseHeaders": true
        }
      },
      "id": "f37631ff-a9bd-4d8a-a349-68cf2d0c9a0c",
      "name": "Create Clips",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3260,
        220
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Nvj4MaLxTlG47IdN",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "amount": 120
      },
      "id": "96cf75da-a077-4497-9828-bf5b66e6cedd",
      "name": "Wait for Clips",
      "type": "n8n-nodes-base.wait",
      "position": [
        3480,
        220
      ],
      "typeVersion": 1.1,
      "webhookId": "d216b8f2-5dc8-49a4-8834-329f79bbcbd0"
    },
    {
      "parameters": {
        "url": "=https://api.wavespeed.ai/api/v3/predictions/{{ $json.data.id }}/result",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "a1060d4f-6a8b-4ab1-99a9-87f3938cc1fe",
      "name": "Get Clips",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3780,
        220
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "={{ $('Get Final Video').item.json.video_url }}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "id": "5f9662ac-995d-41f8-b74e-13466a663b21",
      "name": "Download Final Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        4120,
        820
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "=AI ASMR : {{ $('Update Final Video to Sheet').item.json.idea }}",
        "options": {
          "description": "=AI-Generated Video Idea: {{ $('Update Final Video to Sheet').item.json.idea }}\n\nThis video was created automatically using our automated workflow #asmrai #asmr #n8n",
          "notifySubscribers": true,
          "privacyStatus": "public",
          "tags": "=asmr, viral, asmrai, n8n, automation"
        }
      },
      "id": "350bef0b-deaa-4c16-9e78-ef2f0952455d",
      "name": "Upload to YouTube",
      "type": "n8n-nodes-base.youTube",
      "position": [
        4320,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "=‚úÖ Your new video is ready!  **Title:** {{ $('Update Final Video to Sheet').item.json.idea }}  \nWatch it here: \nhttps://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "06620929-ce5c-4044-85a9-e5676061ba59",
      "name": "Telegram Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [
        4600,
        820
      ],
      "typeVersion": 1.2,
      "webhookId": "5815b9bb-9ac5-4256-95d3-1a4eea1e13c4"
    },
    {
      "parameters": {
        "sendTo": "your-email@gmail.com",
        "subject": "‚úÖ Your new video is ready!",
        "message": "=‚úÖ Your new video is ready!  **Title:** {{ $('Update Final Video to Sheet').item.json.idea }}  Watch it here: https://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}",
        "options": {
          "senderName": "Bilsimaging -n8n Automation"
        }
      },
      "id": "118d50e8-3887-4250-8547-4526e91355b4",
      "name": "Gmail Notification",
      "type": "n8n-nodes-base.gmail",
      "position": [
        4600,
        1000
      ],
      "typeVersion": 2.1,
      "webhookId": "e825f403-531b-429c-a11b-4720d6930399"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_SHEET_NAME"
        },
        "columns": {
          "value": {
            "production": "Done",
            "youtube_url": "=",
            "final_output": "={{ $json.video_url }}"
          },
          "mappingMode": "defineBelow"
        },
        "options": {}
      },
      "id": "fa80771f-6e82-4e2b-a3cb-af5ada370dfe",
      "name": "Update Final Video to Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        4120,
        640
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_SHEET_NAME"
        },
        "columns": {
          "value": {
            "youtube_url": "=https://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}"
          },
          "mappingMode": "defineBelow"
        },
        "options": {}
      },
      "id": "d4212178-14f4-4be1-8b1d-ac1cbad3b580",
      "name": "Update Sheet with Youtube Link",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        4600,
        640
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1800,
        420
      ],
      "id": "2199bd91-c44d-4882-ac14-6db1b28d536d",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "DGVWWD0awTo3Jxrf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2180,
        440
      ],
      "id": "0870876b-f05d-47de-9495-f185156a4020",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "DGVWWD0awTo3Jxrf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Generate one short, trendy, and viral ASMR video idea. Describe the core concept in less than 10 words. Do not explain it, just state the idea.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an AI that specializes in identifying viral trends on platforms like TikTok and YouTube Shorts. Your job is to brainstorm a single, simple, and satisfying ASMR video concept. You must only return the idea as a single line of plain text. Do not add any extra words, formatting, or explanation."
        }
      },
      "id": "4b5e64af-a8f0-4bc4-9d2e-0ba59c0cb4e8",
      "name": "1.generar una idea en tendencia",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1800,
        220
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Take the following trendy ASMR idea and expand it into a full production plan using your required JSON format. Use the examples below for inspiration on how to format the \"Idea\" field.\n\nThe short ASMR idea is:\n[[\n{{ $json.output }}\n]]\n\nHave your final expanded \"Idea\" field be in this format: \"(color/style) (object) being (action)\". \nExamples for your inspiration: layered rainbow kinetic sand being sliced, sparkly purple soap being scooped, neon green slime being pressed.\n\nUse the Think tool to review your output.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role**: You are an AI designed to generate 1 immersive, satisfying idea based on a user-provided topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"kinetic sand slicing,\" \"satisfying sand scooping,\" \"ASMR sand sounds\").\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n** 4 topic-relevant hashtags\n** 4 all-time most popular hashtags\n** 4 currently trending hashtags\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. minimalist white surface, clean studio table)\nKey visuals or background details (e.g. bright lighting, subtle glitter)\nStyle of scene (e.g. macro close-up, cinematic slow-motion)\n\nThe Sound must:\n\nBe under 15 words.\n\nDescribe the primary sound that makes sense to happen in the video. This will be fed to a sound model later on.\n\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Caption\": \"That crunch! ü§§ #kineticsand #satisfyingvideos #asmrsand #sand #oddlysatisfying #viral #fyp #explore #trending #tiktok #diy #crafts\",\n    \"Idea\": \"Slicing through a block of layered rainbow kinetic sand\",\n    \"Environment\": \"Macro close-up on a clean, bright white surface, cinematic slow-motion\",\n    \"Sound\": \"Crisp, crunchy slicing sounds with a soft, gentle hiss\",\n    \"Status\": \"for production\"\n  }\n]"
        }
      },
      "id": "d3008409-a1cf-4d6e-88b9-c47d06733ea0",
      "name": "2. convierte la idea en un plan",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2200,
        220
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1R09EmGrrkZC6g0QDKk97iRDfZdSF9imDXPYf5sECZIw",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Hoja 1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "idea": "=={{ $json.output[0].Idea }}",
            "caption": "={{ $json.output[0].Caption }}",
            "production": "=In Progress",
            "sound_prompt": "={{ $json.output[0].Sound }}",
            "environment_prompt": "={{ $json.output[0].Environment }}",
            "status": "={{ $json.output[0].Status }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "idea",
              "displayName": "idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "caption",
              "displayName": "caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "production",
              "displayName": "production",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sound_prompt",
              "displayName": "sound_prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "environment_prompt",
              "displayName": "environment_prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "20093f9f-a02c-4850-afa6-80390347e783",
      "name": "3. Registrar nueva idea en la hoja",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2560,
        220
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "AsMdHZZELYqC7L9A",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Paso 1: Obtener la cadena de texto cruda desde la IA.\n// Apuntamos a items.json.output, que es donde est√° el string.\nlet rawOutput = items[0].json.output;\n\nlet scenes = [];\n\ntry {\n  // Paso 2: Limpiar la cadena de texto.\n  // Quitamos los ```json, ``` y cualquier espacio en blanco al inicio o al final.\n  if (rawOutput.startsWith(\"```json\")) {\n    rawOutput = rawOutput.substring(7); // Quita \"```json\\n\"\n  }\n  if (rawOutput.endsWith(\"```\")) {\n    rawOutput = rawOutput.slice(0, -3); // Quita \"```\"\n  }\n  rawOutput = rawOutput.trim();\n\n  // Paso 3: Convertir la cadena de texto limpia a un objeto JSON real.\n  const jsonData = JSON.parse(rawOutput);\n\n  // Paso 4: Extraer las escenas de cada objeto en la lista.\n  // El c√≥digo original buscaba las escenas, lo reutilizamos aqu√≠.\n  function findSceneEntries(obj) {\n    const sceneValues = [];\n    for (const [key, value] of Object.entries(obj)) {\n      if (key.toLowerCase().startsWith(\"scene\") && typeof value === 'string') {\n        sceneValues.push(value);\n      }\n    }\n    return sceneValues;\n  }\n\n  // Iteramos sobre la lista de ideas que nos dio la IA\n  for (const item of jsonData) {\n    scenes.push(...findSceneEntries(item));\n  }\n\n  // Paso 5: Verificar si encontramos alguna escena.\n  if (scenes.length === 0) {\n    throw new Error(\"No scene keys were found after parsing the JSON.\");\n  }\n\n  // Paso 6: Formatear la salida final para el siguiente nodo.\n  // Mapeamos cada descripci√≥n de escena a un nuevo objeto.\n  return scenes.map(scene => ({ description: scene }));\n\n} catch (e) {\n  // Si algo falla (por ejemplo, el JSON est√° mal formado), lanzamos un error claro.\n  throw new Error(\"Could not process AI output. Details: \" + e.message);\n}"
      },
      "id": "83bea665-2c1c-43ac-8790-b8b0b46588c4",
      "name": "Desagregar Prompts",
      "type": "n8n-nodes-base.code",
      "position": [
        3060,
        220
      ],
      "typeVersion": 2
    }
  ],
  "pinData": {},
  "connections": {
    "Think": {
      "ai_tool": [
        [
          {
            "node": "2. convierte la idea en un plan",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Prompts AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parser": {
      "ai_outputParser": [
        [
          {
            "node": "2. convierte la idea en un plan",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get Clips": {
      "main": [
        [
          {
            "node": "Create Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sounds": {
      "main": [
        [
          {
            "node": "List Elements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Clips": {
      "main": [
        [
          {
            "node": "Wait for Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Sounds": {
      "main": [
        [
          {
            "node": "Wait for Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Elements": {
      "main": [
        [
          {
            "node": "Sequence Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sequence Video": {
      "main": [
        [
          {
            "node": "Wait for Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Clips": {
      "main": [
        [
          {
            "node": "Get Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final Video": {
      "main": [
        [
          {
            "node": "Update Final Video to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Sounds": {
      "main": [
        [
          {
            "node": "Get Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompts AI Agent": {
      "main": [
        [
          {
            "node": "Desagregar Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "1.generar una idea en tendencia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to YouTube": {
      "main": [
        [
          {
            "node": "Gmail Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Sheet with Youtube Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Final Video": {
      "main": [
        [
          {
            "node": "Upload to YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Final Video": {
      "main": [
        [
          {
            "node": "Get Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Final Video to Sheet": {
      "main": [
        [
          {
            "node": "Download Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "1.generar una idea en tendencia",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "2. convierte la idea en un plan",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Prompts AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "1.generar una idea en tendencia": {
      "main": [
        [
          {
            "node": "2. convierte la idea en un plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. convierte la idea en un plan": {
      "main": [
        [
          {
            "node": "3. Registrar nueva idea en la hoja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Registrar nueva idea en la hoja": {
      "main": [
        [
          {
            "node": "Prompts AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Desagregar Prompts": {
      "main": [
        [
          {
            "node": "Create Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "796cb8a6-473f-417d-801c-cedbc7759e6f",
  "meta": {
    "instanceId": "86e739eea938306b865cd0a570e7d217fc7e4506f43d76afb9a8128192903df2"
  },
  "id": "Y5qnHPU1Cg9clWhT",
  "tags": []
}